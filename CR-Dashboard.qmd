---
title: "GAGE Endline CR Dashboard"
format: dashboard
theme: 
  - default
  - inputs/styles.scss
editor_options: 
  chunk_output_type: console
params:
  form_id: gage_endline_cr_survey
  sample_size: "inputs/sample_size.rds"
  submissionDate: SubmissionDate
  admin_1: list_region
  admin_2: list_zone
  admin_3: list_woreda
  unique_id: hhid
  duration: duration
  gps: geo_back
  consent: consent
  consent_yes: 1
  consent_no: 2
---



```{r Setting-survey-credentials}

# Set local file paths for testing locally
local_gs_token <- "secrets/monitoring-446409-c6231994c3cd.json"
local_scto_token <- "secrets/scto_auth.txt"
local_private_token <- "secrets/key.pem"

```




```{r Loading-packages-and-scripts}

library(rsurveycto)
library(tidyverse)
library(collapse)
library(stringdist)


source("scripts/variables.R")
```



```{r Prioritizing-Github-secrets}

# Replace credentials with github tokens
if(file.exists(local_gs_token)){
  GSHEET_TOKEN <- local_gs_token
  } else {
    GSHEET_TOKEN <- Sys.getenv('GSHEET_TOKEN')
    }


if(file.exists(local_private_token)){
  PRIVATE_TOKEN <- local_private_token
  } else {
    token_text <- Sys.getenv('PRIVATE_TOKEN')
    write_file(token_text, "PRIVATE_TOKEN.pem")
    Sys.sleep(3)
    PRIVATE_TOKEN <- "PRIVATE_TOKEN.pem"
  }


if(file.exists(local_scto_token)){
  SCTO_TOKEN <- local_scto_token
  } else {
    token_text <- Sys.getenv('SCTO_TOKEN')
    write_file(token_text, "SCTO_TOKEN.txt")
    Sys.sleep(3)
    SCTO_TOKEN <- "SCTO_TOKEN.txt"
  }

```





```{r Downloading-the-data}

sample_size <- readRDS(params$sample_size) %>% 
  rename(admin_1 = params$admin_1,
         admin_3 = params$admin_3) %>% 
  mutate(Sample = fsum(sample_size), .by = admin_1)


# Avoid downloading for testing locally
if(!exists("raw_data") & file.exists("secrets/raw_data.rds")){
  raw_data <- readRDS("secrets/raw_data.rds")
} else if(!exists("raw_data")) {
    raw_data <- scto_read(
  auth = scto_auth(SCTO_TOKEN),
  ids = params$form_id,
  private_key = PRIVATE_TOKEN
  )
}

# Convert variable
df <- raw_data %>% 
  # Rename params variables
  rename(unique_id = params$unique_id,
         admin_1 = params$admin_1,
         admin_2 = params$admin_2,
         admin_3 = params$admin_3,
         consent = params$consent,
         duration = params$duration,
         submissionDate = params$submissionDate) %>% 
  # Convert time zone 
  mutate(submissionDate = ymd_hms(submissionDate),
         submissionDate = as_date(with_tz(submissionDate, 
                                          "Africa/Nairobi")),
         duration = round(as.numeric(duration)/60)) %>% 
    arrange(unique_id, consent) %>% 
  # Drop refusal if the same id has consented
  mutate(n = n(), rn = row_number(), .by = unique_id) %>% 
  filter(!((consent == params$consent_no | is.na(consent)) & 
            n > 1 & rn > 1)) %>%
  # Drop duplicates -> another approach can be used to avoid double counting
  distinct(unique_id, .keep_all = TRUE) %>% 
  left_join(sample_size, by = c("admin_1", "admin_3")) %>% 
  mutate(enumname = str_to_title(
    if_else(cs_enumname == "-96", cs_enumname_x, cs_enumname_name))) %>% 
  mutate(Enumerator = sapply(enumname, function(x) {
    enum_name[which.min(stringdist(x, enum_name, method = "lv"))]
  }))


```




```{r Prepare-OJS-data}
ojs_data <- df |> 
  select(unique_id, admin_1, admin_2, admin_3, consent, sample_size, Sample,
         duration, Enumerator, cr_verified, submissionDate)


geo <- df %>% 
  separate_wider_delim(params$gps, delim = " ",
                       names = c("lat", "lng", "other1", "other2"),
                       too_few = "align_end") %>% 
  mutate(across(c(lat, lng), as.numeric),
         cons_ref = if_else(consent == 1, "Consented", "Refused")) %>% 
  filter(!(is.na(lat) | is.na(lng))) %>% 
  mutate(label = str_glue("{admin_1} - {admin_3} - {cons_ref}")) |> 
  select(admin_1, admin_3, lng, lat, label)



ojs_define(geo_data = geo)
ojs_define(rData = ojs_data)

```




```{ojs}
//| output: false

// import arquero library
import { aq, op } from '@uwdata/arquero'

// Register necessary functions for arquero
aq.addFunction('parse_ymd', d3.timeParse('%Y-%m-%d'), { override: true });
aq.addFunction('format_date', d3.timeFormat("%b %d, %Y"), { override: true })

// Output table formats
percentFormat = d => d == 100 ? "100%" : d == Infinity ? "100%" : d == 0 ? "0%" : d.toFixed(1) + "%"


// Functions
function sparkbar(max) {
  return x => htl.html`<div style="
    background: lightblue;
    width: ${100 * x / max}%;
    float: right;
    padding-right: 3px;
    box-sizing: border-box;
    overflow: visible;
    display: flex;
    justify-content: end;">${x.toLocaleString("en")}`
}


// Data
data = transpose(rData)
geoData = transpose(geo_data)
aqData = aq.from(data)
```


# Dashboard



```{ojs}
//| output: false
//| label: Dasboard-figures

dashboardAdmin = ['All'].concat(
    aqData.rollup({ 
      a: d => op.array_agg_distinct(d.admin_1) 
    })._data.a[0].sort())


dashboardGroup = dashPickAdmin == "All" ? "admin_1" : "admin_3"

dashboardData = aqData
  .params({
  admin: dashPickAdmin,
  g: dashboardGroup
  })
  .filter((d, $) => $.admin == "All" ? true : op.includes($.admin, d.admin_1))
  .derive({
    consented: d => d.consent == 1 ? 1 : 0,
    refused: d => d.consent == 2 ? 1 : 0,
    sample: (d, $) => $.g == "admin_1" ? d.Sample : d.sample_size,
    notLocated: d => d.cr_verified == 3 ? 1 : 0
  })


dashboardTable = dashboardData
  .groupby(dashboardGroup)
  .rollup({
    total: d => op.array_agg_distinct(d.sample),
    submitted: op.count(),
    submittedPerc: d => op.count() / op.array_agg_distinct(d.sample) * 100 || 0,
    consented: d => op.sum(d.consented),
    consentedPerc: d => (op.sum(d.consented) / op.count())*100 || 0,
    refused: d => op.sum(d.refused),
    refusedPerc: d => (op.sum(d.refused) / op.count()) * 100 || 0,
    duration: d => op.round(op.average(d.duration))
  })
  .ungroup()

totalSample = dashboardTable.rollup(
  {a: d => op.sum(d.total)})._data.a[0].toFixed()

submittedSample = d3.sum(dashboardTable, d => d.submitted)
  
submittedValue = submittedSample + " (" + ((submittedSample/totalSample) * 100).toFixed(1) + "%)"

consentedSample = d3.sum(dashboardTable, d => d.consented)

consentedValue = consentedSample + " (" + ((consentedSample/submittedSample) * 100).toFixed(1) + "%)"

refusedSample = d3.sum(dashboardTable, d => d.refused)

refusedValue = refusedSample + " (" + ((refusedSample/submittedSample) * 100).toFixed(1) + "%)"


notLocatedSample = d3.sum(dashboardData, d => d.notLocated)

notLocatedValue = notLocatedSample + " (" + ((notLocatedSample/submittedSample) * 100).toFixed(1) + "%)"

```

## Sidebar {.sidebar width="15%"}



```{ojs}

viewof dashPickAdmin = Inputs.select(
  dashboardAdmin,
  {
    value: "",
    label: "Select a Region",
    unique: true
  }
)
```



##  Main display


### Valueboxes {height="30%"}


::: {.valuebox icon="people-fill" color="secondary"}

Total Sample

`{ojs} totalSample`
:::

::: {.valuebox icon="people-fill" color="info"}

Submitted

`{ojs} submittedValue`
:::

::: {.valuebox icon="person-check" color="success"}

Consented

`{ojs} consentedValue`
:::

::: {.valuebox icon="person-x" color="danger"}

Refused

`{ojs} refusedValue`
:::

::: {.valuebox icon="geo-alt" color="warning"}

Unable to locate

`{ojs} notLocatedValue`
:::




### Main Table {height="70%"}

```{ojs}

Inputs.table(dashboardTable, {
  header: {
    admin_0: "Country",
    admin_1: "Region",
    admin_2: "Zone",
    admin_3: "Woreda",
    total: "Sample",
    submitted: "Submitted",
    submittedPerc: "Submitted (%)",
    consented: "Consented",
    consentedPerc: "Consented (%)",
    refused: "Refused",
    refusedPerc: "Refused (%)",
    duration: "Duration"
  },
  format: {
  submittedPerc: percentFormat,
  consentedPerc: percentFormat,
  refusedPerc: percentFormat
  },
  layout: "auto"
})
```





# Progress


```{ojs}
//| output: false
//| label: Progress-figures

progressGroup = progPickAdmin == "All" ? "admin_1" : "admin_3"


progressData = aqData
  .params({
  admin: progPickAdmin,
  g: progressGroup
  })
  .filter((d, $) => $.admin == "All" ? true : op.includes($.admin, d.admin_1))
  .derive({
    consented: d => d.consent == 1 ? 1 : 0,
    refused: d => d.consent == 2 ? 1 : 0,
    sample: (d, $) => $.g == "admin_1" ? d.Sample : d.sample_size
  })


progressTable = progressData
  .groupby('submissionDate')
  .rollup({
  Submissions: op.count(),
  Consented: d => op.sum(d.consented),
  Refused: d => op.sum(d.refused),
  Duration: d => op.round(op.average(d.duration))
  })
  .ungroup()
  .orderby(aq.desc('submissionDate'))
  
sampleSize = progressData
  .params({
      admin: progPickAdmin
  })
  .derive({sampleAdmin: (d, $) => $.admin == "All" ? d.admin_1 : d.admin_3})
  .select('sampleAdmin', 'sample')
  .dedupe()
  .rollup(
  {a: d => op.sum(d.sample)})._data.a[0].toFixed()
nDailySub = (progressData.numRows() / nDaysIntoDC).toFixed()
nDaysIntoDC = progressData.groupby('submissionDate').count().numRows()
nDaysLeft = nDaysEst - nDaysIntoDC
nDaysEst = ((nDaysIntoDC * sampleSize)/progressData.numRows()).toFixed()

```


## Sidebar {.sidebar width="15%"}




```{ojs}
viewof progPickAdmin = Inputs.select(
  dashboardAdmin,
  {
    value: "",
    label: "Select a Region",
    unique: true
  }
)
```


##  Main display



###  Valueboxes {height="30%"}




::: {.valuebox icon="person-up" color="success"}

Avg. survey/day

`{ojs} nDailySub`
:::

::: {.valuebox icon="calendar-check" color="info"}

Days into DC

`{ojs} nDaysIntoDC`
:::

::: {.valuebox icon="calendar" color="warning"}

Days left

`{ojs} nDaysLeft`
:::

::: {.valuebox icon="calendar3" color="secondary"}

Days estimated

`{ojs} nDaysEst`
:::




### Main Table {height="70%"}

```{ojs}
// 'Submission Date': d => op.format_date(op.parse_ymd(d.submissionDate))
Inputs.table(progressTable, 
  {
    header: {
        submissionDate: "Date"
  },
  layout: "auto"
  })
```


# Duration


## Sidebar {.sidebar width="15%"}

```{ojs}
viewof durPickAdmin = Inputs.select(
  dashboardAdmin,
  {
    value: "",
    label: "Select a Region",
    unique: true
  }
)
```


```{ojs}
//| output: false

durGroup = durPickAdmin == "All" ? "admin_1" : "admin_3"


durData = aqData
  .params({
  admin: durPickAdmin
  })
  .filter((d, $) => $.admin == "All" ? true : op.includes($.admin, d.admin_1))
  .filter((d) => d.consent == 1)




durTable = durData
  .groupby(durGroup)
  .rollup({
  Minimum:  d => op.round(op.min(d.duration)),
  Average: d => op.round(op.average(d.duration)),
  Maximum: d => op.round(op.max(d.duration))
})


```



## Main Table


```{ojs}
//| title: 'These figures are computed using only consented surveys'
Inputs.table(durTable, {
  header: {
    admin_0: "Country",
    admin_1: "Region",
    admin_2: "Zone",
    admin_3: "Woreda"
    },
  layout: "auto"
  })
```


## Main Table


```{ojs}
//| title: 'Average survey duration for consented surveys by submission date'

Plot.plot({
  y: {label: "Average survey duration (min)", grid: true },
  x: {label: 'Submission date', grid: true, labelOffset: -5},
  color: {
    range: ["#3ca951", "#ff725c"]
  },
  style: {fontSize: "12px"},
  marks: [
    Plot.lineY(
    durData,
      Plot.binX({ y: "mean" }, { x: (d) => op.parse_ymd(d.submissionDate), 
      y: (d) => op.round(d.duration), tip: true })
    ),
        Plot.dot(
      durData,
      Plot.binX(
        { y: "mean", stroke: "mean" },
        { x: (d) => op.parse_ymd(d.submissionDate), 
        y: (d) => op.round(d.duration), 
        stroke: (d) => op.round(d.duration), strokeWidth: 8 }
      )
    ),
    Plot.ruleY([30])
    ]
})
```



# Enumerators



## Sidebar {.sidebar width="15%"}

```{ojs}
viewof enumPickAdmin = Inputs.select(
  dashboardAdmin,
  {
    value: "",
    label: "Select a Region",
    unique: true
  }
)
```


```{ojs}
//| output: false


enumTable = aqData
  .params({
  admin: enumPickAdmin
  })
  .filter((d, $) => $.admin == "All" ? true : op.includes($.admin, d.admin_1))
  .derive({
    consented: d => d.consent == 1 ? 1 : 0,
    refused: d => d.consent == 2 ? 1 : 0,
  })
  .groupby('Enumerator')
  .rollup({
  Submitted: d => op.count(),
  Consented: d => op.sum(d.consented),
  Refused: d => op.sum(d.refused),
  'Min. Duration':  d => op.round(op.min(d.duration)),
  'Avg. Duration': d => op.round(op.average(d.duration)),
  'Max. Duration': d => op.round(op.max(d.duration))
})


```



## Main Table


```{ojs}
Inputs.table(enumTable, {
  header: {
    admin_0: "Country",
    admin_1: "Region",
    admin_2: "Zone",
    admin_3: "Woreda"
    },
  layout: "auto",
  format: {
  Submitted: sparkbar(d3.max(enumTable, d => d.Submitted))
}
  })
```




# Map

## Sidebar {.sidebar}


```{ojs}

viewof pickMapAdmin = Inputs.select(
    d3.group(d3.sort(geoData, d => d.admin_1), d => d.admin_1),
    {
    value: "",
    label: "Select a Region"
}
)
```



```{ojs}
viewof pickMapAdmin3 = Inputs.select(
    d3.group(d3.sort(pickMapAdmin, d => d.admin_3), d => d.admin_3),
    {
    value: "",
    label: "Select a Woreda"
}
)
```




## Main content

```{ojs}
L = {
  const L = await require("leaflet@1/dist/leaflet.js");
  if (!L._style) {
    const href = await require.resolve("leaflet@1/dist/leaflet.css");
    document.head.appendChild(L._style = html`<link href=${href} rel=stylesheet>`);
  }
  return L;
}


map = {
  let container = DOM.element('div', { 
  style: `width:${width}px;height:${width/1.6}px` });
  
  yield container;
  
  let map = L.map(container).setView([9.5, 40], 6.5);
  let osmLayer = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map);
  
   pickMapAdmin3.forEach(row => {
    L.marker([row.lat, row.lng])
      .addTo(map)
      .bindTooltip(row.label, { permanent: false, direction: "top" });
  });
}

```

