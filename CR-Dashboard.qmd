---
title: "GAGE Endline CR Dashboard"
format: dashboard
theme: 
  - default
  - inputs/styles.scss
editor_options: 
  chunk_output_type: console
params:
  form_id: gage_endline_cr_survey
  submissionDate: SubmissionDate
  admin_0: list_country
  admin_1: list_region
  admin_2: list_zone
  admin_3: list_woreda
  admin_4: list_kebele
  unique_id: hhid
  duration: duration
  gps: geo_back
  consent: consent
  consent_yes: 1
  consent_no: 2
---


```{r Loading-packages-and-scripts}

library(rsurveycto)
library(tidyverse)
library(stringdist)

source("scripts/variables.R")

current_time <- Sys.time()
converted_time <- format(current_time, tz = "Africa/Addis_Ababa", usetz = TRUE)
```


```{r Downloading-the-data}

samples <- readRDS("inputs/samples.rds")


# Avoid downloading for testing locally
if(!exists("raw_data") & file.exists("secrets/raw_data.rds")){
  raw_data <- readRDS("secrets/raw_data.rds")
} else if(!exists("raw_data")) {
  
  temp_file <- file.path(tempdir(), "SCTO_TOKEN.txt")
  
  write_file(Sys.getenv('SCTO_TOKEN'), temp_file)
    Sys.sleep(3)
    SCTO_TOKEN <- temp_file
  
  raw_data <- scto_read(
    auth = scto_auth(SCTO_TOKEN),
    ids = params$form_id
  )
}

# Convert variable
df <- raw_data %>% 
  # Rename params variables
  rename(unique_id = params$unique_id,
         admin_0 = params$admin_0,
         admin_1 = params$admin_1,
         admin_2 = params$admin_2,
         admin_3 = params$admin_3,
         admin_4 = params$admin_4,
         consent = params$consent,
         duration = params$duration,
         submissionDate = params$submissionDate) %>% 
  # Convert time zone 
  mutate(submissionDate = ymd_hms(submissionDate),
         submissionDate = as_date(with_tz(submissionDate, 
                                          "Africa/Nairobi")),
         duration = round(as.numeric(duration)/60),
         consent = as.numeric(consent)) %>% 
    arrange(unique_id, consent) %>% 
  # Drop refusal if the same id has consented
  mutate(n = n(), rn = row_number(), .by = unique_id) %>% 
  filter(!((consent == params$consent_no | is.na(consent)) & 
            n > 1 & rn > 1)) %>%
  # Drop duplicates -> another approach can be used to avoid double counting
  distinct(unique_id, .keep_all = TRUE) %>% 
  mutate(enumname = str_to_title(
    if_else(cs_enumname == "-96", cs_enumname_x, cs_enumname_name))) %>% 
  mutate(Enumerator = sapply(enumname, function(x) {
    enum_name[which.min(stringdist(x, enum_name, method = "lv"))]
  }))


```

```{r Prepare-OJS-data}
ojs_data <- df |> 
  select(unique_id, admin_0, admin_1, admin_2, admin_3, admin_4,
         consent, duration, Enumerator, cr_verified, submissionDate) |> 
  mutate(admin_0 = "Ethiopia")


geo <- df %>% 
  separate_wider_delim(params$gps, delim = " ",
                       names = c("latitude", "longitude", "other1", "other2"),
                       too_few = "align_end") %>% 
  mutate(across(c(latitude, longitude), as.numeric),
         cons_ref = if_else(consent == 1, "Consented", "Refused")) %>% 
  filter(!(is.na(latitude) | is.na(longitude))) %>% 
  mutate(label = str_glue("{unique_id} - {cons_ref}"),
         admin_0 = "Ethiopia") |> 
  select(admin_0, admin_1, admin_2, admin_3, admin_4, latitude, longitude, label)



ojs_define(geo_data = geo)
ojs_define(rData = ojs_data)
ojs_define(samples = samples)

```

```{ojs}
//| output: false

// import arquero library
import { tidy, groupBy, summarize, sum, distinct, mean, mutate, mutateWithSummary, n, select, filter, leftJoin, arrange, desc, min, max } from '@pbeshai/tidyjs';


parseYMD = d3.timeParse('%Y-%m-%d')
timeFormat = d3.timeFormat("%b %d, %Y")

// Output table formats
percentFormat = d => d == 100 ? "100%" : d == Infinity ? "100%" : d == 0 ? "0%" : d.toFixed(1) + "%"


// Functions
function sparkbar(max) {
  return x => htl.html`<div style="
    background: lightblue;
    width: ${100 * x / max}%;
    float: right;
    padding-right: 3px;
    box-sizing: border-box;
    overflow: visible;
    display: flex;
    justify-content: end;">${x.toLocaleString("en")}`
}


// Data
data = transpose(rData)
geoData = transpose(geo_data)
sampleData = transpose(samples)


// Format variables
tidyData = tidy(data, mutate({
  submissionDate: d => parseYMD(d.submissionDate),
  consented: d => d.consent == 1 ? 1 : 0,
  refused: d => d.consent == 2 ? 1 : 0}))


// Admins
admins = new Map([
      ["Country", "admin_0"],
      ["Region", "admin_1"],
      ["Zone", "admin_2"],
      ["Woreda", "admin_3"],
      ["Kebele", "admin_4"]
    ])
```

# Dashboard

## Sidebar {.sidebar width="15%"}

```{ojs}
viewof dashboardGroupName = Inputs.select(
    admins,
    {
    value: "admin_1",
    label: "Group by:"
  }
  )

viewof dashboardFilterName = Inputs.select(
    admins,
    {
      value: null,
      label: "Filter by:"
    })
    // : html`<p><p>`; => place holder


viewof dashboardFilterValue = Inputs.select(
    tidy(tidyData, groupBy(dashboardFilterName, groupBy.keys())).sort(),
    {
      value: null,
      label: "Keep:"
    })

```


```{ojs}
//| output: false
dashboardSummaryTable = tidy(
  tidyData,
  filter(d => d[dashboardFilterName] == dashboardFilterValue),
  groupBy(dashboardGroupName, [
    summarize({
      submitted: n(),
      consented: sum('consented'),
      refused: sum('refused'),
      duration: mean('duration')
    })
  ]),
  mutate({
    consentedPerc: d => (d.consented / d.submitted) * 100,
    refusedPerc: d => (d.refused / d.submitted) * 100,
    duration: d => d.duration.toFixed()
  }),
  leftJoin(
    tidy(
      sampleData,
      filter(d => d[dashboardFilterName] == dashboardFilterValue),
      groupBy(dashboardGroupName, [
        summarize({
          total: sum('sampleSize')
        })
      ])
    ),
    { by: dashboardGroupName }
  ),
  mutate({
    submittedPerc: d => (d.submitted / d.total) * 100
  }),
  select([dashboardGroupName, 'total', 'submitted', 'submittedPerc',
  'consented', 'consentedPerc', 'refused', 'refusedPerc',
  'duration'])
);


totalSample = d3.sum(dashboardSummaryTable, d => d.total)
submittedSample = d3.sum(dashboardSummaryTable, d => d.submitted)
submittedValue = submittedSample + 
  " ("  + ((submittedSample/totalSample)*100).toFixed() + "%)"
consentedSample = d3.sum(dashboardSummaryTable, d => d.consented)
consentedValue = consentedSample + 
  " ("  + ((consentedSample/submittedSample)*100).toFixed() + "%)"
refusedSample = d3.sum(dashboardSummaryTable, d => d.refused)
refusedValue = refusedSample + 
  " ("  + ((refusedSample/submittedSample)*100).toFixed() + "%)"
```

##  Main display


### Valueboxes {height="30%"}


::: {.valuebox icon="people-fill" color="secondary"}

Total Sample

`{ojs} totalSample`
:::

::: {.valuebox icon="people-fill" color="info"}

Submitted

`{ojs} submittedValue`
:::

::: {.valuebox icon="person-check" color="success"}

Consented

`{ojs} consentedValue`
:::

::: {.valuebox icon="person-x" color="danger"}

Refused

`{ojs} refusedValue`
:::


### Main Table {height="70%"}


```{ojs}
Inputs.table(dashboardSummaryTable, {
  sort: dashboardGroupName,
    header: {
    admin_0: "Country",
    admin_1: "Region",
    admin_2: "Zone",
    admin_3: "Woreda",
    admin_4: "Kebele",
    total: "Sample",
    submitted: "Submitted",
    submittedPerc: "Submitted (%)",
    consented: "Consented",
    consentedPerc: "Consented (%)",
    refused: "Refused",
    refusedPerc: "Refused (%)",
    duration: "Duration"
  },
  format: {
    submittedPerc: percentFormat,
    consentedPerc: percentFormat,
    refusedPerc: percentFormat
  },
  layout: "auto"
  })
```


# Progress

## Sidebar {.sidebar width="15%"}

```{ojs}
viewof progressFilterName = Inputs.select(
    admins,
    {
      value: null,
      label: "Filter by:"
    })
    // : html`<p><p>`; => place holder


viewof progressFilterValue = Inputs.select(
    tidy(tidyData, groupBy(progressFilterName, groupBy.keys())).sort(),
    {
      value: null,
      label: "Keep:"
    })

```

```{ojs}
//| output: false
progressSummaryTable = tidy(
  tidyData,
  filter(d => d[progressFilterName] == progressFilterValue),
  groupBy('submissionDate', [
    summarize({
      submitted: n(),
      consented: sum('consented'),
      refused: sum('refused'),
      duration: mean('duration')
    })
  ]),
  arrange(desc('submissionDate')),
  mutate({
    submissionDate: d => timeFormat(d.submissionDate),
    duration: d => d.duration.toFixed()
}))

subSampleSize = tidy(sampleData,
    filter(d => d[progressFilterName] == progressFilterValue),
    sum('sampleSize'))
    
nDailySub = d3.mean(progressSummaryTable, d => d.submitted).toFixed()
nDaysIntoDC = progressSummaryTable.length
nDaysEst = (subSampleSize/nDailySub).toFixed()
nDaysLeft = (nDaysEst - nDaysIntoDC) >= 0 ? nDaysEst - nDaysIntoDC : 0
```

##  Main display

###  Valueboxes {height="30%"}

::: {.valuebox icon="person-up" color="success"}

Avg. survey/day

`{ojs} nDailySub`
:::

::: {.valuebox icon="calendar-check" color="info"}

Days into DC

`{ojs} nDaysIntoDC`
:::

::: {.valuebox icon="calendar" color="warning"}

Days left

`{ojs} nDaysLeft`
:::

::: {.valuebox icon="calendar3" color="secondary"}

Days estimated

`{ojs} nDaysEst`
:::

### Main Table {height="70%"}

```{ojs}
Inputs.table(progressSummaryTable, 
  {
    header: {
        submissionDate: "Date",
        submitted: "Submitted",
        consented: "Consented",
        refused: "Refused",
        duration: "Duration"
  },
  layout: "auto"
  })
```

# Duration

## Sidebar {.sidebar width="15%"}

```{ojs}
viewof durationGroupName = Inputs.select(
    admins,
    {
    value: "admin_1",
    label: "Group by:"
  }
  )

viewof durationFilterName = Inputs.select(
    admins,
    {
      value: null,
      label: "Filter by:"
    })
    // : html`<p><p>`; => place holder


viewof durationFilterValue = Inputs.select(
    tidy(tidyData, groupBy(durationFilterName, groupBy.keys())).sort(),
    {
      value: null,
      label: "Keep:"
    })
```

```{ojs}
//| output: false
durationData = tidy(
  tidyData,
  filter(d => d[durationFilterName] == durationFilterValue),
  filter(d => d.consent == 1))

durationSummaryTable = tidy(
  durationData,
    groupBy(durationGroupName, [
    summarize({
      n: n(),
      min: min('duration'),
      avg: mean('duration'),
      max: max('duration')
    })
  ])
)


```

## Main display

```{ojs}
//| title: 'These figures are computed using only consented surveys'
Inputs.table(durationSummaryTable, {
  header: {
    admin_0: "Country",
    admin_1: "Region",
    admin_2: "Zone",
    admin_3: "Woreda",
    admin_4: "Kebele",
    n: "N",
    min: "Minimum",
    avg: "Average",
    max: "Maximum",
  },
  format: {
    avg: d => d.toFixed()
  },
  layout: "auto"
  })
```

## Display graph

```{ojs}
//| title: 'Average survey duration for consented surveys by submission date'

Plot.plot({
  y: { grid: true },
  x: { grid: true},
  color: {
    range: ["#3ca951", "#ff725c"]
  },
  style: {fontSize: "12px"},
  marks: [
    Plot.lineY(
    durationData,
      Plot.binX({ y: "mean" }, { x: 'submissionDate', 
      y: 'duration', tip: true })
    ),
        Plot.dot(
      durationData,
      Plot.binX(
        { y: "mean", stroke: "mean" },
        { x: 'submissionDate', 
        y: 'duration', 
        stroke: 'duration', strokeWidth: 2 }
      )
    ),
    Plot.ruleY([30]),
    Plot.frame()
    ]
})
```


# Enumerators

## Sidebar {.sidebar width="15%"}

```{ojs}
viewof enumeratorFilterName = Inputs.select(
    admins,
    {
      value: null,
      label: "Filter by:"
    })
    // : html`<p><p>`; => place holder


viewof enumeratorFilterValue = Inputs.select(
    tidy(tidyData, groupBy(enumeratorFilterName, groupBy.keys())).sort(),
    {
      value: null,
      label: "Keep:"
    })
```

```{ojs}
//| output: false

enumeratorSummaryTable = tidy(
  tidyData,
  filter(d => d[enumeratorFilterName] == enumeratorFilterValue),
  groupBy('Enumerator', [
    summarize({
      Submitted: n(),
      Consented: sum('consented'),
      Refused: sum('refused'),
      'Min. Duration':  min('duration'),
      'Avg. Duration': mean('duration'),
      'Max. Duration': max('duration')
    })
  ]))
```

## Main Table

```{ojs}
Inputs.table(enumeratorSummaryTable, {
  header: {
    admin_0: "Country",
    admin_1: "Region",
    admin_2: "Zone",
    admin_3: "Woreda"
    },
  layout: "auto",
  format: {
  Submitted: sparkbar(d3.max(enumeratorSummaryTable, d => d.Submitted)),
  'Avg. Duration': d => d.toFixed()
  },
  layout: "auto"
  })
```


# Map

## Sidebar {.sidebar width="15%"}

```{ojs}

viewof mapFilterName = Inputs.select(
    admins,
    {
      value: "admin_3",
      label: "Filter by:"
    })
    // : html`<p><p>`; => place holder


viewof mapFilterValue = Inputs.select(
    tidy(geoData, groupBy(mapFilterName, groupBy.keys())).sort(),
    {
      value: null,
      label: "Keep:"
    })


html`<br><br><h6>Note:</h6> <ul>Hover over the mapmarkers to see details.</ul>`
```

## Main content

```{ojs}
mapData = tidy(
  geoData,
  filter(d => d[mapFilterName] == mapFilterValue))
  
  
L = {
  const L = await require("leaflet@1/dist/leaflet.js");
  if (!L._style) {
    const href = await require.resolve("leaflet@1/dist/leaflet.css");
    document.head.appendChild(L._style = html`<link href=${href} rel=stylesheet>`);
  }
  return L;
}

map = {
  let container = DOM.element('div', { 
  style: `width:${width}px;height:${width/1.6}px` });
  
  yield container;
  
  let map = L.map(container).setView([9.5, 40], 6.5);
  let osmLayer = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map);
  
   mapData.forEach(row => {
    L.marker([row.latitude, row.longitude])
      .addTo(map)
      .bindTooltip(row.label, { permanent: false, direction: "top" });
  });
}

```

